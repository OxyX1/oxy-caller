<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC Video Call</title>
    <style>
        #room-id-display {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>WebRTC Video Call</h1>

    <!-- Room creation section -->
    <button id="create-room">Create Room</button>
    <div id="room-id-display"></div> <!-- Display room ID here -->
    
    <div>
        <label for="room-id">Enter Room ID:</label>
        <input type="text" id="room-id" placeholder="Enter Room ID" />
        <button id="join-room">Join Room</button>
    </div>

    <video id="local-video" autoplay muted></video>
    <video id="remote-video" autoplay></video>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        let localStream;
        let peerConnection;
        const roomIdInput = document.getElementById('room-id');
        const joinButton = document.getElementById('join-room');
        const createRoomButton = document.getElementById('create-room');
        const roomIdDisplay = document.getElementById('room-id-display');
        const localVideo = document.getElementById('local-video');
        const remoteVideo = document.getElementById('remote-video');

        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' } // Use public STUN server for ICE
            ]
        };

        // Start the video call
        async function startCall() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                localVideo.srcObject = localStream;

                peerConnection = new RTCPeerConnection(configuration);
                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

                // Handle incoming ICE candidates
                peerConnection.onicecandidate = ({ candidate }) => {
                    if (candidate) {
                        socket.emit('ice-candidate', candidate, roomIdInput.value);
                    }
                };

                // Handle remote video stream
                peerConnection.ontrack = (event) => {
                    remoteVideo.srcObject = event.streams[0];
                };

                // Create an offer and send to the other user
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit('offer', offer, roomIdInput.value);
            } catch (err) {
                console.error('Error accessing media devices', err);
            }
        }

        // Handle incoming offer
        socket.on('offer', async (offer) => {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            socket.emit('answer', answer, roomIdInput.value);
        });

        // Handle incoming answer
        socket.on('answer', (answer) => {
            peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        });

        // Handle ICE candidates
        socket.on('ice-candidate', (candidate) => {
            peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
        });

        // Join the room when the button is clicked
        joinButton.addEventListener('click', () => {
            const roomId = roomIdInput.value;
            socket.emit('join-room', roomId, socket.id);
            startCall();
        });

        // Handle room creation
        createRoomButton.addEventListener('click', async () => {
            const response = await fetch('/create-room');
            const data = await response.json();
            const newRoomId = data.roomId;
            roomIdInput.value = newRoomId; // Auto-fill the room ID input
            roomIdDisplay.innerHTML = `Room ID: ${newRoomId}`; // Display the room ID
        });
    </script>
</body>
</html>
